{"version":3,"file":"static/js/701.baa7ea8b.chunk.js","mappings":"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","sources":["webpack://my-app-u/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://my-app-u/./src/components/Dialogs/DialogsAuthor/DialogsAuthors.module.css?9680","components/Dialogs/DialogsAuthor/DialogsAuthor.tsx","webpack://my-app-u/./src/components/Dialogs/DialogsMessage/DialogsMessage.module.css?bfd6","components/Dialogs/DialogsMessage/DialogsMessage.tsx","webpack://my-app-u/./src/components/Dialogs/DialogsResponse/DialogsResponse.module.css?700b","components/Dialogs/DialogsResponse/DialogsResponse.tsx","components/Dialogs/DialogsForm.tsx","redux/dialogs-selectors.ts","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsPage.tsx","webpack://my-app-u/./src/components/common/formsControls/formsConstrols.module.css?d382","components/common/formsControls/formsConstrols.js","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__Nautl\",\"newMessage\":\"Dialogs_newMessage__g0YwE\",\"title\":\"Dialogs_title__9v4yJ\",\"AllMessages\":\"Dialogs_AllMessages__Rc9Bn\",\"form\":\"Dialogs_form__n1lhs\",\"addMessageButton\":\"Dialogs_addMessageButton__OHkh9\",\"authorName\":\"Dialogs_authorName__Or9gR\",\"chat\":\"Dialogs_chat__2osF6\",\"authors\":\"Dialogs_authors__tRLTD\"};","// extracted by mini-css-extract-plugin\nexport default {\"authorName\":\"DialogsAuthors_authorName__O5mp+\",\"avatar\":\"DialogsAuthors_avatar__n9vs9\",\"active\":\"DialogsAuthors_active__kxSxT\",\"author\":\"DialogsAuthors_author__NuwqF\"};","import { NavLink } from 'react-router-dom';\r\nimport classes from './DialogsAuthors.module.css'\r\nimport React from \"react\";\r\n\r\n\r\ntype propsType = {\r\n    avatar: string\r\n    personalMessages: (id:number) => void\r\n    id: number\r\n    name: string\r\n}\r\n\r\nconst AuthorItem: React.FC<propsType> = ({avatar,personalMessages,id,name}) => {\r\n\r\n    return (\r\n        <div className={classes.author}>\r\n            <div className={classes.avatar}>\r\n                <img src={avatar} alt=\"\" />\r\n            </div>\r\n            <NavLink\r\n                onClick={()=>{personalMessages(id)}}\r\n                className={navData => navData.isActive ? classes.active : classes.authorName}\r\n                to={\"/dialogs/\" + id}>\r\n                {name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default AuthorItem;","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"DialogsMessage_message__QCXMD\",\"messageBlock\":\"DialogsMessage_messageBlock__IFJSX\"};","import classes from './DialogsMessage.module.css'\r\nimport React from \"react\";\r\n\r\ntype propsType = {\r\n    message: string\r\n}\r\n\r\nconst MessageItem: React.FC<propsType> = ({message}) => {\r\n    return(\r\n        <div className={classes.messageBlock}>\r\n            <div className={classes.message}>{message}</div>\r\n        </div> \r\n    )\r\n}\r\n\r\nexport default MessageItem;","// extracted by mini-css-extract-plugin\nexport default {\"response\":\"DialogsResponse_response__qglJ5\",\"responseBlock\":\"DialogsResponse_responseBlock__F64QK\",\"me\":\"DialogsResponse_me__Eidh5\"};","import classes from './DialogsResponse.module.css'\r\n\r\ntype propsType = {\r\n    response: string | null\r\n}\r\n\r\nconst ResponseItem: React.FC<propsType> = ({ response }) => {\r\n    return <div className={classes.responseBlock}>\r\n        <span className={classes.me}>Me</span>\r\n        <div className={classes.response}>{response}</div>\r\n    </div>\r\n}\r\n\r\n\r\nexport default ResponseItem","import classes from './Dialogs.module.css'\r\nimport { Field } from 'redux-form';\r\nimport { Textarea } from '../common/formsControls/formsConstrols';\r\nimport { maxLengthValidatorCreator, required } from '../../utils/validators/validators';\r\n\r\n\r\n\r\n\r\nlet maxLength200 = maxLengthValidatorCreator(200)\r\n\r\n\r\n\r\n\r\nlet AddMessageForm = ({handleSubmit}:any) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} className={classes.newMessage}>\r\n            <Field\r\n                className={classes.form}\r\n                name='newMessageBody'\r\n                placeholder='Enter your message'\r\n                component={Textarea}\r\n                validate={[required, maxLength200]}>\r\n            </Field>\r\n            <button className={classes.addMessageButton}>Add message</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AddMessageForm;","import { AppStateType } from './redux-store';\r\n\r\nexport const getMessages = (state:AppStateType) => {\r\n    return state.dialogs.messages\r\n}\r\nexport const getAuthors = (state:AppStateType) => {\r\n    return state.dialogs.authors\r\n}\r\nexport const getResponses = (state:AppStateType) => {\r\n    return state.dialogs.responses\r\n}\r\n","import classes from './Dialogs.module.css'\r\nimport AuthorItem from './DialogsAuthor/DialogsAuthor';\r\nimport MessageItem from './DialogsMessage/DialogsMessage';\r\nimport { useState } from 'react';\r\nimport { reduxForm } from 'redux-form';\r\nimport ResponseItem from './DialogsResponse/DialogsResponse';\r\nimport { addMessage } from '../../redux/dialogs-reducer';\r\nimport AddMessageForm from './DialogsForm';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getAuthors, getMessages, getResponses } from '../../redux/dialogs-selectors';\r\n\r\n\r\n\r\n\r\nconst Dialogs = () => {\r\n\r\n    const authors = useSelector( getAuthors )\r\n    const messages = useSelector( getMessages )\r\n    const responses =useSelector( getResponses )\r\n\r\n    const dispatch = useDispatch()\r\n    let [currentId, changeId] = useState(1)\r\n\r\n    let ChangeCurrentCompanion = (id:number) => {\r\n        changeId(id)\r\n    }\r\n\r\n    let messagesElements = messages.map((message) => {\r\n        if (currentId === message.id) {\r\n            return <MessageItem message={message.message} key={message.id} />\r\n        } return null\r\n    })\r\n\r\n    let responsesElements = responses[currentId - 1].messages.map((responseObj) => {\r\n        return <ResponseItem response={responseObj.message} key={responseObj.id} />\r\n    })\r\n    \r\n    let authorsElements = authors.map((author) =>\r\n        <AuthorItem personalMessages={ChangeCurrentCompanion} id={author.id} name={author.name} key={author.id} avatar={author.avatar} />)\r\n\r\n    let onFormSumbit = (FormData: { newMessageBody: string }) => {\r\n        dispatch(addMessage(FormData.newMessageBody, currentId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h1 className={classes.title}>My dialogs</h1>\r\n            <div className={classes.dialogs}>\r\n                <div className={classes.authors}>\r\n                    {authorsElements}\r\n                </div>\r\n                <div className={classes.AllMessages}>\r\n                    <div className={classes.chat}>\r\n                        <span className={classes.authorName}>{authors[currentId - 1].name}</span>\r\n                        {messagesElements}\r\n                        {responsesElements}\r\n                    </div>\r\n                    {//@ts-ignore\r\n                    <AddMessageFormRedux onSubmit={onFormSumbit} />}\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\n\r\nlet AddMessageFormRedux = reduxForm({ form: 'dialogAddMessageForm' })(AddMessageForm)\r\n\r\n\r\n\r\nexport default Dialogs;","\r\nimport Dialogs from './Dialogs';\r\nimport withAuthRedirect from '../../hoc/withAuthRedirect';\r\nimport { compose } from 'redux';\r\n\r\n\r\nexport default compose<any>(\r\n    withAuthRedirect,\r\n)(Dialogs)","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"formsConstrols_formControl__zzqGo\",\"error\":\"formsConstrols_error__aoWSK\",\"CheckBox\":\"formsConstrols_CheckBox__gXUjF\",\"rememberMe\":\"formsConstrols_rememberMe__8rnmp\",\"squere\":\"formsConstrols_squere__BrXPc\",\"formSummaryError\":\"formsConstrols_formSummaryError__DSSCy\",\"spanWrapper\":\"formsConstrols_spanWrapper__2K-W2\"};","import styles from \"./formsConstrols.module.css\"\r\nimport React from \"react\";\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n    return (\r\n        <span className={styles.spanWrapper}>\r\n            <textarea {...input}{...props}/>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport const Input = ({input, meta, ...props}) => {\r\n    return <span className={styles.spanWrapper}>\r\n            <input  {...input}{...props}/>\r\n        </span>\r\n        \r\n    \r\n}\r\n\r\nexport const CheckBox = ({input}) => {\r\n    return (\r\n        <div className={styles.CheckBox} >\r\n            <input className={styles.squere}  type=\"checkBox\" {...input}/> <span className={styles.rememberMe}>remember</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n  \r\n","export const required = (value:boolean) => {\r\n    if (value) return undefined;\r\n    return 'Field is reguired';  \r\n}\r\n\r\nexport const maxLengthValidatorCreator = (maxLength: number) => {\r\n    return (value: string) => {\r\n        if (value.length > maxLength) {\r\n            return `Max length is ${maxLength} symbols`\r\n        }\r\n        return undefined\r\n    }\r\n}\r\n"],"names":["avatar","personalMessages","id","name","className","classes","src","alt","onClick","navData","isActive","to","message","response","maxLength200","maxLengthValidatorCreator","handleSubmit","onSubmit","Field","placeholder","component","Textarea","validate","required","getMessages","state","dialogs","messages","getAuthors","authors","getResponses","responses","AddMessageFormRedux","reduxForm","form","AddMessageForm","useSelector","dispatch","useDispatch","useState","currentId","changeId","ChangeCurrentCompanion","messagesElements","map","responsesElements","responseObj","authorsElements","author","FormData","addMessage","newMessageBody","compose","withAuthRedirect","Dialogs","input","props","meta","styles","Input","CheckBox","type","value","maxLength","length"],"sourceRoot":""}