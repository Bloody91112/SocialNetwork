{"version":3,"file":"static/js/243.dd5b7e50.chunk.js","mappings":"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","sources":["redux/profile-selectors.ts","webpack://my-app-u/./src/components/Profile/ProfileInfo/ProfileStatus.module.css?417b","components/Profile/ProfileInfo/ProfileStatus.tsx","webpack://my-app-u/./src/components/Profile/ProfileInfo/ProfileData.module.css?6c9a","webpack://my-app-u/./src/components/Profile/ProfileInfo/Contact.module.css?e51c","components/Profile/ProfileInfo/Contact.tsx","webpack://my-app-u/./src/components/Profile/MyPosts/MyPosts.module.css?831b","webpack://my-app-u/./src/components/Profile/MyPosts/Post/Post.module.css?87e6","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/ProfileInfo/ProfileData.tsx","webpack://my-app-u/./src/components/Profile/ProfileInfo/ProfileDataForm.module.css?5c5c","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfilePage.tsx","hoc/withRouter.js","webpack://my-app-u/./src/components/common/formsControls/formsConstrols.module.css?d382","components/common/formsControls/formsConstrols.js","utils/validators/validators.ts"],"sourcesContent":["import { AppStateType } from './redux-store';\r\n\r\nexport const getProfile = (state: AppStateType) => {\r\n    return state.profile.profile\r\n}\r\nexport const getStatus = (state: AppStateType) => {\r\n    return state.profile.status\r\n}\r\nexport const getAuthUserId = (state: AppStateType) => {\r\n    return state.auth.id\r\n}\r\nexport const getIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\nexport const getTestingMode = (state:AppStateType) => {\r\n    return state.app.testingMode\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"status\":\"ProfileStatus_status__N5qzw\",\"input\":\"ProfileStatus_input__GkRm0\",\"statusBlock\":\"ProfileStatus_statusBlock__bW46H\",\"commonStatus\":\"ProfileStatus_commonStatus__-7pb1\",\"commonStatusDT\":\"ProfileStatus_commonStatusDT__7iGii\",\"statusDT\":\"ProfileStatus_statusDT__yFh6h\"};","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { updateUserStatus } from '../../../redux/profile-reducer';\r\nimport { getStatus, getTestingMode } from '../../../redux/profile-selectors';\r\nimport classes from './ProfileStatus.module.css';\r\n\r\n\r\ntype propsType = {\r\n    isOwner: boolean\r\n    \r\n}\r\n\r\n\r\nconst ProfileStatus: React.FC<propsType> = ({isOwner}) => {\r\n\r\n    const testingMode = useSelector(getTestingMode)\r\n    const status = useSelector(getStatus)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    let [editMode, setEditMode] = useState<boolean>(false)\r\n    let [newStatus, setNewStatus] = useState<string>(status)\r\n\r\n    \r\n    \r\n\r\n    useEffect( () => {\r\n        setNewStatus(status)\r\n    }, [status])\r\n\r\n    const activateEditMode = () => {\r\n        if (isOwner) setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        dispatch(updateUserStatus(newStatus))\r\n    }\r\n\r\n    const onStatusChange = (event: { currentTarget: { value: string }; }) => {\r\n       setNewStatus(event.currentTarget.value)\r\n    }\r\n\r\n    return <div className={classes.statusBlock}>\r\n        \r\n        <div className={testingMode? classes.commonStatusDT + \" \" + classes.commonStatus: classes.commonStatus}>Status</div>\r\n        {!editMode &&\r\n            <span className={testingMode? classes.statusDT + \" \" + classes.status:classes.status} onClick={activateEditMode}>\r\n                {status || 'no status'}\r\n            </span>\r\n        }\r\n        {editMode &&\r\n            <div>\r\n                <input className={classes.input}\r\n                    spellCheck=\"false\"\r\n                    onChange={onStatusChange}\r\n                    onBlur={deactivateEditMode}\r\n                    autoFocus={true}\r\n                    value={newStatus}\r\n                />\r\n            </div>}\r\n\r\n    </div>\r\n\r\n}\r\n\r\nexport default ProfileStatus","// extracted by mini-css-extract-plugin\nexport default {\"description\":\"ProfileData_description__d0gG6\",\"fullPage\":\"ProfileData_fullPage__ZvFic\",\"UsersPosts\":\"ProfileData_UsersPosts__-VQuZ\",\"userName\":\"ProfileData_userName__2u8Ri\",\"avatar\":\"ProfileData_avatar__iy7e1\",\"avatarBlock\":\"ProfileData_avatarBlock__+9X4z\",\"title\":\"ProfileData_title__ZqW8I\",\"editProfileButton\":\"ProfileData_editProfileButton__NgsWv\",\"rightPartContainer\":\"ProfileData_rightPartContainer__T8CQh\",\"prop\":\"ProfileData_prop__p2k4a\",\"propTitle\":\"ProfileData_propTitle__eYH-g\",\"propDescription\":\"ProfileData_propDescription__gUqsi\",\"leftPartContainer\":\"ProfileData_leftPartContainer__50hyU\",\"showContacts\":\"ProfileData_showContacts__y9cmB\",\"editProfileButtonDT\":\"ProfileData_editProfileButtonDT__W0t+D\",\"rightPartContainerDT\":\"ProfileData_rightPartContainerDT__8IHXj\",\"propTitleDT\":\"ProfileData_propTitleDT__E4fPO\",\"propDescriptionDT\":\"ProfileData_propDescriptionDT__LENw9\"};","// extracted by mini-css-extract-plugin\nexport default {\"contactValue\":\"Contact_contactValue__-l0R3\",\"correctContact\":\"Contact_correctContact__XlDGL\",\"contactTitle\":\"Contact_contactTitle__QjIQi\",\"contact\":\"Contact_contact__-2ErT\",\"contactDT\":\"Contact_contactDT__cYjEb\"};","import { useSelector } from 'react-redux';\r\nimport { getTestingMode } from '../../../redux/header-selectors';\r\nimport classes from './Contact.module.css';\r\n\r\n\r\ntype propsType = {\r\n    contactTitle: any\r\n    contactValue: any\r\n}\r\n\r\nconst Contact: React.FC<propsType> = ({ contactTitle, contactValue }) => {\r\n    \r\n    const testingMode = useSelector(getTestingMode)\r\n\r\n    return <div className={classes.contact}>\r\n        <div className={testingMode ? classes.contactDT + \" \" + classes.contactTitle : classes.contactTitle}>\r\n            {contactTitle}:\r\n        </div>\r\n        <div className={testingMode ? classes.contactDT + \" \" + classes.contactValue : classes.contactValue}>\r\n            {contactValue || '-'}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default Contact","// extracted by mini-css-extract-plugin\nexport default {\"postsBlock\":\"MyPosts_postsBlock__srOM8\",\"posts\":\"MyPosts_posts__3uHGW\",\"newPostBlock\":\"MyPosts_newPostBlock__z9HqS\",\"newPost\":\"MyPosts_newPost__V4gla\",\"addPostButton\":\"MyPosts_addPostButton__QKNet\",\"postsBlockDT\":\"MyPosts_postsBlockDT__2Cj9d\",\"addPostButtonDT\":\"MyPosts_addPostButtonDT__OV-E4\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"Post_item__olsn3\",\"avatar\":\"Post_avatar__7enE3\",\"likes\":\"Post_likes__hbPSM\",\"postInfo\":\"Post_postInfo__tX67u\"};","import classes from './Post.module.css';\r\nimport React from \"react\";\r\n\r\ntype propsType = {\r\n    avatar: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\n\r\nconst Post:React.FC<propsType> = ({avatar,message,likesCount}) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <div className={classes.avatar}><img src={avatar} alt=\"\" /></div>\r\n            <div className={classes.postInfo}>\r\n                <div className={classes.message}>{message}</div>\r\n                <div className={classes.likes}>{likesCount} &#9829; </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import classes from './MyPosts.module.css';\r\nimport React from 'react';\r\nimport { Field, InjectedFormProps } from 'redux-form';\r\nimport { maxLengthValidatorCreator, required } from '../../../utils/validators/validators';\r\nimport { Textarea } from '../../common/formsControls/formsConstrols';\r\nimport { useSelector } from 'react-redux';\r\nimport { getTestingMode } from '../../../redux/profile-selectors';\r\n\r\n\r\nlet maxLength30 =  maxLengthValidatorCreator(30)\r\n\r\ntype formDataType = {\r\n    postText: string\r\n}\r\n\r\nlet AddPostForm:React.FC<InjectedFormProps<formDataType, unknown>> = ({handleSubmit}:any) => {\r\n\r\n    const testingMode = useSelector(getTestingMode)\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit} className={classes.newPostBlock}>\r\n                <Field name='postText'\r\n                 className={classes.newPost}\r\n                 component={Textarea}\r\n                 placeholder='What`s new?'\r\n                 validate={[required,maxLength30]}>\r\n                </Field>\r\n\r\n                <button className={testingMode? classes.addPostButtonDT + \" \" + classes.addPostButton : classes.addPostButton}>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default AddPostForm;","import classes from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { reduxForm } from 'redux-form';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getTestingMode } from '../../../redux/profile-selectors';\r\nimport { addPost } from '../../../redux/profile-reducer';\r\nimport AddPostForm from './AddPostForm';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\nimport { postsType } from '../../common/types/types';\r\n\r\n\r\ntype formDataType = {\r\n    postText: string\r\n}\r\n\r\nconst MyPosts = () => {\r\n\r\n    const testingMode = useSelector(getTestingMode)\r\n    const posts: Array<postsType> = useSelector( (state:AppStateType) => state.profile.posts )\r\n    const dispatch = useDispatch()\r\n    \r\n\r\n    let onSubmit = (formData: formDataType) => {\r\n        dispatch(addPost(formData.postText))\r\n    }\r\n\r\n    let postsElements = posts.map((post: postsType) => <Post message={post.message} likesCount={post.likesCount} avatar={post.avatar} key={post.id} />)\r\n\r\n    return (\r\n        <div className={testingMode ? classes.postsBlockDT + \" \" + classes.postsBlock : classes.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <ReduxAddPostForm onSubmit={onSubmit} />\r\n            <div className={classes.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nlet ReduxAddPostForm = reduxForm<formDataType, unknown>({ form: 'addNewPostForm' })(AddPostForm)\r\n\r\nexport default MyPosts;","import ProfileStatus from \"./ProfileStatus\"\r\nimport classes from './ProfileData.module.css';\r\nimport Contact from \"./Contact\";\r\nimport cat from '../../../assets/images/cat.jpg'\r\nimport { useState } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getIsAuth, getProfile, getTestingMode } from \"../../../redux/profile-selectors\";\r\nimport MyPosts from \"../MyPosts/MyPosts\";\r\n\r\n\r\ntype propsType = {\r\n    isOwner: boolean\r\n    activateEditMode: () => void\r\n}\r\n\r\n\r\nconst ProfileData:React.FC<propsType> = ({isOwner,activateEditMode}) => {\r\n\r\n\r\n    const profile:any = useSelector(getProfile)\r\n    const testingMode = useSelector(getTestingMode)\r\n    const isAuth = useSelector(getIsAuth)\r\n\r\n    let [contacts, changeContacts] = useState(false)\r\n\r\n    const handleClick = () => {\r\n        if (contacts === true){\r\n            changeContacts(false)\r\n        } else {\r\n            changeContacts(true)\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <div className={classes.fullPage}>\r\n            {isOwner && <h1 className={classes.title}>My page</h1>}\r\n            {isOwner &&\r\n                <button className={testingMode? classes.editProfileButtonDT + \" \" + classes.editProfileButton : classes.editProfileButton}\r\n                    onClick={activateEditMode}>\r\n                    Edit pofile\r\n                </button>}\r\n            <div className={classes.description}>\r\n                <div className={classes.leftPartContainer}>\r\n                    <div className={classes.avatarBlock}>\r\n                        <img className={classes.avatar} src={profile.photos.large || cat} alt='' />\r\n                    </div>\r\n                    \r\n                    <ProfileStatus isOwner={isOwner} />\r\n                </div>\r\n                <div className={testingMode? classes.rightPartContainerDT + \" \" + classes.rightPartContainer : classes.rightPartContainer}>\r\n                    <div className={classes.prop}>\r\n                        <div className={testingMode? classes.propTitleDT + \" \" + classes.propTitle : classes.propTitle}>\r\n                            Nickname\r\n                        </div>\r\n                        <div className={testingMode? classes.propDescriptionDT + \" \" + classes.propDescription : classes.propDescription}>\r\n                            {profile.fullName}\r\n                            </div>  \r\n                    </div>\r\n\r\n                    <div className={classes.prop}>\r\n                    <div className={testingMode? classes.propTitleDT + \" \" + classes.propTitle : classes.propTitle}>\r\n                            Looking for a job\r\n                            </div>  \r\n                        <div className={testingMode? classes.propDescriptionDT + \" \" + classes.propDescription : classes.propDescription}>\r\n                            {profile.lookingForAJob ? 'yes' : 'no'}\r\n                            </div>\r\n                    </div>\r\n\r\n                    {profile.lookingForAJob &&\r\n                        <div className={classes.prop}>\r\n                        <div className={testingMode? classes.propTitleDT + \" \" + classes.propTitle : classes.propTitle}>\r\n                                My professional skills\r\n                                </div>\r\n                                <div className={testingMode? classes.propDescriptionDT + \" \" + classes.propDescription : classes.propDescription}>\r\n                                {profile.lookingForAJobDescription}\r\n                                </div> \r\n                        </div>}\r\n\r\n                    <div className={classes.prop}>\r\n                    <div className={testingMode? classes.propTitleDT + \" \" + classes.propTitle : classes.propTitle}>\r\n                            About me\r\n                            </div>  \r\n                            <div className={testingMode? classes.propDescriptionDT + \" \" + classes.propDescription : classes.propDescription}>\r\n                            {profile.aboutMe || 'nothing'}\r\n                            </div>\r\n                    </div>\r\n\r\n                    <div className={classes.prop}>\r\n                    <div className={testingMode? classes.propTitleDT + \" \" + classes.propTitle : classes.propTitle}>\r\n                            Contacts\r\n                        </div>\r\n                        \r\n                        <button\r\n                            className={testingMode? classes.editProfileButtonDT + \" \" + classes.editProfileButton : classes.editProfileButton}\r\n                            onClick={handleClick}> Show contacts\r\n                        </button>\r\n                        {contacts && Object.keys(profile.contacts).map((key) => {\r\n                            return <Contact\r\n                                key={key}\r\n                                contactTitle={key}\r\n                                //@ts-ignore\r\n                                contactValue={profile.contacts[key]} />\r\n                        })}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {isOwner ?\r\n                <MyPosts/> :\r\n                isAuth ?\r\n                    <div className={classes.UsersPosts}>\r\n                        <div className={classes.userName}>{profile.fullName}</div>\r\n                        hasn't written any posts yet\r\n                    </div> :\r\n                    <div className={classes.UsersPosts}>\r\n                        <div className={classes.userName}>{profile.fullName}</div>\r\n                        Login to read posts\r\n                    </div>\r\n            }\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileData","// extracted by mini-css-extract-plugin\nexport default {\"editProfileBlock\":\"ProfileDataForm_editProfileBlock__8CVrK\",\"formField\":\"ProfileDataForm_formField__1dfrR\",\"loadFileButton\":\"ProfileDataForm_loadFileButton__ZhcI9\",\"saveButton\":\"ProfileDataForm_saveButton__w4lZj\",\"formFieldDT\":\"ProfileDataForm_formFieldDT__v8-Zd\",\"saveButtonDT\":\"ProfileDataForm_saveButtonDT__Pg4VI\"};","import { Field } from 'redux-form';\r\nimport { reduxForm } from 'redux-form';\r\nimport { Input, Textarea } from '../../common/formsControls/formsConstrols';\r\nimport Contact from './Contact';\r\nimport classes from './ProfileDataForm.module.css';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getProfile, getTestingMode } from '../../../redux/profile-selectors';\r\nimport { saveProfile, setUserPhoto } from '../../../redux/profile-reducer';\r\n\r\n\r\ntype propsType = {\r\n    deactivateEditMode: (boolean: boolean) => void\r\n}\r\n\r\ntype fieldsPropsType = {\r\n    handleSubmit: any\r\n}\r\n\r\n\r\nconst ProfileDataForm: React.FC<propsType> = ({ deactivateEditMode }) => {\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    let onSubmit = (formData: any) => {\r\n        //@ts-ignore\r\n        dispatch(saveProfile(formData)).then(() => {\r\n            deactivateEditMode(false)\r\n        })}\r\n        \r\n    return (\r\n        <div className={classes.editProfileBlock}>\r\n            <h1>Edit profile mode</h1>\r\n            <ReduxProfileDataForm onSubmit={onSubmit} />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst ProfileDataFields: React.FC<fieldsPropsType> = ({ handleSubmit }) => {\r\n\r\n    const profile:any = useSelector(getProfile)\r\n    const testingMode = useSelector(getTestingMode)\r\n    const dispatch = useDispatch()\r\n\r\n    const onPhotoAdded = (e: any) => {\r\n        if (e.target.files.length) {\r\n            dispatch(setUserPhoto(e.target.files[0]))\r\n        }\r\n    }\r\n\r\n    return <form onSubmit={handleSubmit}>\r\n        \r\n            <div className={testingMode? classes.formFieldDT + \" \" + classes.formField :classes.formField}>\r\n                <b>Change Avatar</b>\r\n                <input className={classes.loadFileButton} type={'file'} onChange={onPhotoAdded} />\r\n          \r\n                <b>Full name :</b>\r\n                <Field name='fullName'\r\n                    component={Input}\r\n                    validate={[]}\r\n                    placeholder=\"Full name\">\r\n                </Field>\r\n            \r\n\r\n                <div className={testingMode? classes.formFieldDT + \" \" + classes.formField :classes.formField}>\r\n                <b>Looking for a job :</b>\r\n                <Field name='lookingForAJob'\r\n                    component='input'\r\n                    type=\"checkbox\"\r\n                    validate={[]}\r\n                    placeholder=\"Looking for a job\">\r\n                </Field>\r\n            </div>\r\n            <div className={testingMode? classes.formFieldDT + \" \" + classes.formField :classes.formField}>\r\n                <b>Professional skills :</b>\r\n                <Field name='lookingForAJobDescription'\r\n                    component={Textarea}\r\n                    validate={[]}\r\n                    placeholder=\"Professional skills\">\r\n                </Field>\r\n            </div>\r\n            <div className={testingMode? classes.formFieldDT + \" \" + classes.formField :classes.formField}>\r\n                <b>About me :</b>\r\n                <Field name='aboutMe'\r\n                    component={Textarea}\r\n                    validate={[]}\r\n                    placeholder=\"About me\">\r\n                </Field>\r\n            </div>\r\n            <div className={testingMode? classes.formFieldDT + \" \" + classes.formField :classes.formField}>\r\n                {Object.keys(profile.contacts).map((key) => {\r\n                    return <Contact\r\n                         key={key}\r\n                        contactTitle={key}\r\n                        contactValue={\r\n                            <Field name={`contacts.${key}`}\r\n                                component={Input}\r\n                                placeholder={`your ${key} page URL`}></Field>\r\n                        } />\r\n                })}\r\n                <button className={testingMode? classes.saveButtonDT + \" \" + classes.saveButton :classes.saveButton}>Save</button>\r\n            </div>\r\n        </div>\r\n    </form>\r\n}\r\n\r\n\r\nlet ReduxProfileDataForm = reduxForm<any>({ form: \"editProfile\" })(ProfileDataFields)\r\n\r\nexport default ProfileDataForm","import { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useMatch, useNavigate } from \"react-router-dom\";\r\nimport { compose } from \"redux\";\r\nimport { withRouter } from \"../../hoc/withRouter\";\r\nimport { getUserProfile, getUserStatus, } from \"../../redux/profile-reducer\";\r\nimport { getAuthUserId, getIsAuth, getProfile } from \"../../redux/profile-selectors\";\r\nimport Preloader from \"../common/preloader/Preloader\";\r\nimport ProfileData from \"./ProfileInfo/ProfileData\";\r\nimport ProfileDataForm from \"./ProfileInfo/ProfileDataForm\";\r\n\r\n\r\n\r\n\r\n\r\nconst ProfileContainer = () => {\r\n    \r\n    let match = useMatch('/profile/:userId')\r\n\r\n    const isAuth = useSelector(getIsAuth)\r\n    const dispatch = useDispatch()\r\n    const authUserId = useSelector(getAuthUserId)\r\n\r\n    let navigate = useNavigate();\r\n    let userId: any;\r\n    if (match) {\r\n        userId = match.params.userId;\r\n    } else {\r\n        userId = authUserId ? authUserId : undefined\r\n    }\r\n\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (userId === undefined) {\r\n            navigate('login', { replace: true })\r\n        }\r\n        dispatch(getUserProfile(userId))\r\n        dispatch(getUserStatus(userId))\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [userId])\r\n\r\n    const isOwner = !!(isAuth && userId === 22921)\r\n    const profile = useSelector(getProfile)\r\n\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            {editMode ?\r\n                <ProfileDataForm deactivateEditMode={() => { changeEditMode(false) }} />\r\n                : <ProfileData isOwner={isOwner} activateEditMode={() => { changeEditMode(true) }} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default compose<any>(\r\n    withRouter\r\n)(ProfileContainer)","import { useMatch } from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\n\r\n\r\nexport const withRouter = (Component) =>{\r\n    let RouterComponent = (props) => {\r\n            const match = useMatch('/profile/:userId/');\r\n            return <Component {...props} match={match}/>;\r\n    }\r\n    return RouterComponent;\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"formsConstrols_formControl__zzqGo\",\"error\":\"formsConstrols_error__aoWSK\",\"CheckBox\":\"formsConstrols_CheckBox__gXUjF\",\"rememberMe\":\"formsConstrols_rememberMe__8rnmp\",\"squere\":\"formsConstrols_squere__BrXPc\",\"formSummaryError\":\"formsConstrols_formSummaryError__DSSCy\",\"spanWrapper\":\"formsConstrols_spanWrapper__2K-W2\"};","import styles from \"./formsConstrols.module.css\"\r\nimport React from \"react\";\r\n\r\nexport const Textarea = ({input, meta, ...props}) => {\r\n    return (\r\n        <span className={styles.spanWrapper}>\r\n            <textarea {...input}{...props}/>\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport const Input = ({input, meta, ...props}) => {\r\n    return <span className={styles.spanWrapper}>\r\n            <input  {...input}{...props}/>\r\n        </span>\r\n        \r\n    \r\n}\r\n\r\nexport const CheckBox = ({input}) => {\r\n    return (\r\n        <div className={styles.CheckBox} >\r\n            <input className={styles.squere}  type=\"checkBox\" {...input}/> <span className={styles.rememberMe}>remember</span>\r\n        </div>\r\n    )\r\n}\r\n\r\n  \r\n","export const required = (value:boolean) => {\r\n    if (value) return undefined;\r\n    return 'Field is reguired';  \r\n}\r\n\r\nexport const maxLengthValidatorCreator = (maxLength: number) => {\r\n    return (value: string) => {\r\n        if (value.length > maxLength) {\r\n            return `Max length is ${maxLength} symbols`\r\n        }\r\n        return undefined\r\n    }\r\n}\r\n"],"names":["getProfile","state","profile","getStatus","status","getAuthUserId","auth","id","getIsAuth","isAuth","getTestingMode","app","testingMode","isOwner","useSelector","dispatch","useDispatch","useState","editMode","setEditMode","newStatus","setNewStatus","useEffect","className","classes","onClick","spellCheck","onChange","event","currentTarget","value","onBlur","updateUserStatus","autoFocus","contactTitle","contactValue","avatar","message","likesCount","src","alt","maxLength30","maxLengthValidatorCreator","handleSubmit","onSubmit","Field","name","component","Textarea","placeholder","validate","required","ReduxAddPostForm","reduxForm","form","AddPostForm","posts","postsElements","map","post","formData","addPost","postText","activateEditMode","contacts","changeContacts","photos","large","cat","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","Object","keys","key","ReduxProfileDataForm","type","e","target","files","length","setUserPhoto","Input","deactivateEditMode","saveProfile","then","compose","Component","props","match","useMatch","userId","authUserId","navigate","useNavigate","params","undefined","changeEditMode","replace","getUserProfile","getUserStatus","Preloader","input","meta","styles","CheckBox","maxLength"],"sourceRoot":""}